# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

variables:
  jar_version: 3.0.41

jobs:
  - job : 'lint_and_test'
    displayName: 'Run lint and tests'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: NodeTool@0
        inputs:
          versionSource: 'fromFile'
          versionFilePath: '.nvmrc'
        displayName: 'Install Node.js'

      - script: |
          npm ci
        displayName: 'Install project dependency'

      - script: |
          npm run lint
        displayName: 'Lint'

      - script: |
          npm run test:cov
        displayName: 'Test and generate coverage report'

      #publish the tests results
      - task: PublishTestResults@2
        displayName: 'Publish test results '
        inputs:
          testResultsFiles: $(System.DefaultWorkingDirectory)/junit.xml
        condition: succeededOrFailed()

      #publish code coverage reports in cobertura format
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage report'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: $(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml


  - job: 'build_client_typescript_axios'
    displayName: 'Build client code for typescript axios'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: NodeTool@0
        inputs:
          versionSource: 'fromFile'
          versionFilePath: '.nvmrc'
        displayName: 'Install Node.js'

      - script: |
          npm ci
        displayName: 'Install project dependency'

      - script: |
          npx vite-node scripts/doc-gen.ts
        displayName: 'Generate swagger.json'

      - script: |
          sed -i 's/\"其他\"/\"Other\"/g' dist/swagger.json
          sed -i 's/\"用户\"/\"User\"/g' dist/swagger.json
          sed -i 's/\"登录相关接口\"/\"Auth\"/g' dist/swagger.json
          sed -i 's/\"管理员\"/\"Admin\"/g' dist/swagger.json
          sed -i 's/\"OSS 接口\"/\"OSS\"/g' dist/swagger.json
          sed -i 's/\"短信\"/\"SMS\"/g' dist/swagger.json
          sed -i 's/\"资源\"/\"Resource\"/g' dist/swagger.json
        displayName: 'Replace tags in swagger.json'

      - task: JavaToolInstaller@0
        inputs:
          versionSpec: '11'
          jdkArchitectureOption: 'x64'
          jdkSourceOption: 'PreInstalled'
        displayName: 'Build client code for typescript axios'
      - script: |
          java -version
          wget https://repo1.maven.org/maven2/io/swagger/codegen/v3/swagger-codegen-cli/$(jar_version)/swagger-codegen-cli-$(jar_version).jar -O swagger-codegen-cli.jar
          REPOSITORY_NAME=${$BUILD_REPOSITORY_NAME,,}
          BUILD_NUMBER=$(echo $BUILD_BUILDNUMBER | tr -d '.')
          BUILD_NUMBER=$(echo $BUILD_NUMBER | tr -d '+')
          BUILD_NUMBER="0.0.$BUILD_NUMBER"
          java -jar swagger-codegen-cli.jar generate \
            -l typescript-axios \
            -i dist/swagger.json -o ./gen \
            --additional-properties npmVersion=$BUILD_NUMBER,npmName=$REPOSITORY_NAME-client,npmDescription="OpenAPI client for $REPOSITORY_NAME"

      - task: PublishPipelineArtifact@1
        inputs:
          displayName: 'Publish artifacts'
          artifactName: 'client-typescript-axios'
          targetPath: $(Build.SourcesDirectory)/gen


  - job: 'build_docker_image'
    displayName: 'Build docker image and push'
    pool:
      vmImage: 'ubuntu-latest'

    steps:
      - task: Docker@2
        displayName: Login to Aliyun
        inputs:
          command: login
          containerRegistry: AliyunContainerRegistry

      - script: "docker pull node:19"
        displayName: Pull base image

      - script: "docker pull $(registry)/$(imageName):latest"
        displayName: Pull latest for layer caching
        continueOnError: true # for first build, no cache

      - task: Docker@2
        displayName: Build an image
        inputs:
          repository: $(imageName)
          command: build
          Dockerfile: Dockerfile
          containerRegistry: AliyunContainerRegistry
          arguments: '--cache-from=$(registry)/$(imageName):latest'
          tags: latest

      - task: Docker@2
        displayName: Push image to Aliyun
        inputs:
          command: push
          containerRegistry: AliyunContainerRegistry
          repository: $(imageName)
          tags: latest

